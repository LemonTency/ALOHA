% 动态帧时隙 ALOHA（Dynamic Framed-Slotted ALOHA，DFSA）算法仿真（基于 Schoute 标签估算算法）

% Schoute 估算算法说明-------------------------------------------------------------------------------------------
% 
% Schoute 算法是在理想的最大系统效率的前提下进行估算的。假设各时隙持续的时间一样，
% 则系统效率可以由成功识别时隙的概率来表示，此时，碰撞时隙率为：P(coll) = 0.418，
% 则某个时隙 i 内发生碰撞的标签个数的条件概率期望值为：1/P(coll) = 2.3922，
% 所以剩余待识别的标签数为：n = 2.3922*C(coll)。仿真时由于要取整，故向上取整为：n = ceil(2.3922*C(coll))
% 式中：C(coll)――固定一帧内出现碰撞时隙的总数。
% Schoute 估算法与 Lower Bound 估算相类似，当标签数很多时，每个碰撞时隙内的平均标签数会远大于 2.39 个，
% 所以也会产生估算误差大，估算不精确的缺点，同样此方法也不适用于标签数较多的场合。
% 
% END-------------------------------------------------------------------------------------------------------------

clear;
close all;
clc;

S2_64 = zeros(300, 41);  % DFSA-Schoute 标签估算算法系统吞吐率
S2_128 = zeros(300, 41);
S2_256 = zeros(300, 41);

S2_avr_64 = zeros(1, 41);  % 系统平均吞吐率
S2_avr_128 = zeros(1, 41);
S2_avr_256 = zeros(1, 41);

for cycle = 1:300  % 重复进行300次仿真测试
    for TagsNum = 10:10:400
        SlotNum = 0;  % 统计识别完全部标签所需要的总时隙数
        N = 64;  % 设置初始帧长为64
        temp = TagsNum;
        while temp > 0
            SlotNum=SlotNum+N;
            [ succ , idle , coll ] = DFSA_anti ( temp , N );
            N = ceil(2.3922*coll);
            temp = temp - succ;
        end
        S2_64(cycle, TagsNum/10+1)=TagsNum/SlotNum;
    end
end

for cycle = 1:300  % 重复进行300次仿真测试
    for TagsNum = 10:10:400
        SlotNum = 0;  % 统计识别完全部标签所需要的总时隙数
        N = 128;  % 设置初始帧长为128
        temp = TagsNum;
        while temp > 0
            SlotNum=SlotNum+N;
            [ succ , idle , coll ] = DFSA_anti ( temp , N );
            N = ceil(2.3922*coll);
            temp = temp - succ;
        end
        S2_128(cycle, TagsNum/10+1)=TagsNum/SlotNum;
    end
end

for cycle = 1:300  % 重复进行300次仿真测试
    for TagsNum = 10:10:400
        SlotNum = 0;  % 统计识别完全部标签所需要的总时隙数
        N = 256;  % 设置初始帧长为256
        temp = TagsNum;
        while temp > 0
            SlotNum=SlotNum+N;
            [ succ , idle , coll ] = DFSA_anti ( temp , N );
            N = ceil(2.3922*coll);
            temp = temp - succ;
        end
        S2_256(cycle, TagsNum/10+1)=TagsNum/SlotNum;
    end
end  

for i = 2:41
    S2_avr_64(i) = sum(S2_64(:, i))/300;
    S2_avr_128(i) = sum(S2_128(:, i))/300;
    S2_avr_256(i) = sum(S2_256(:, i))/300;
end

i = 0:10:400;
figure(1)
plot(i, S2_avr_64, 'kv-', i, S2_avr_128, 'rv-', i, S2_avr_256, 'bv-');
xlim([0 400]);
title('DFSA-Schoute 标签估算算法仿真');
legend('初始帧长：64', '初始帧长：128', '初始帧长：256', 'location', 'best');
xlabel('N：待识别标签数');
ylabel('S：吞吐率');
grid on;



% 动态帧时隙 ALOHA（Dynamic Framed-Slotted ALOHA，DFSA）算法的碰撞处理函数

function [ S_succ , S_idle , S_coll ] = DFSA_anti ( TagsNum , FrameLength )

S_succ = 0;  % 成功时隙数
S_idle = 0;  % 空闲时隙数
S_coll = 0;  % 碰撞时隙数

RandSlot = randi( [ 1 , FrameLength ] , 1 , TagsNum );   %每个标签在1-Framelenth中随机选一个时隙进行发送
SlotCounter = ones( 1, TagsNum );
% 处于待识别状态的标签随机的从帧长度 1-N 内选择一个时隙来传送数据，
% 这个数值是通过自身携带的伪随机数发生器随机产生的，并且同时将自身的时隙计数器置 1

SlotCheck = zeros( 1, FrameLength );  % 检测每帧中所有时隙的情况（成功/空闲/碰撞）

for i = 1:FrameLength  % 开始帧内时隙的查询
    Remove = [ ];  % 存储发生碰撞/正确识别的标签序号
    for n = 1:TagsNum
        if RandSlot(n) == SlotCounter(n)  % 开始帧内时隙的查询，每个标签将随机选择的时隙号与自身时隙计数器的号码进行比对
            SlotCheck(i) = SlotCheck(i) + 1;  % 当两者相等时标签响应阅读器，并在此时隙内开始传送数据信息
            Remove = [ Remove , n ];  % 将符合判断条件的标签序号存储到行向量 Remove 中
        end  % 当两者不等时，标签不再传送数据信息而是保留此时隙号，并等待阅读器下一次的时隙查询命令
    end
    
    % 在此阶段中，时隙内存在以下三种情况：
    
    if SlotCheck(i) == 0  % 阅读器未检测到标签的数据信息，也就是无标签在此时隙内传输，此时阅读器结束此时隙的查询
        SlotCounter = SlotCounter +1;  % 并且所有标签将自身时隙计数器进行加 1 操作
        S_idle = S_idle + 1;  % 该时隙为空闲时隙
        
    elseif SlotCheck(i) == 1  % 阅读器检测到数据信息并正确识别，也就是此时时隙内只有一个标签在传送消息
        RandSlot(Remove(1)) = [ ];  % 阅读器接收到标签信息后会向标签发送一休眠指令，使标签进入休眠状态，
        SlotCounter(Remove(1)) = [ ];  % 不再响应阅读器的任何指令。我们将其从 RandSlot 和 SlotCounter 矩阵中删除即可
        SlotCounter = SlotCounter +1;  % 其他还处于待识别状态的标签将自身时隙计数器进行加 1 操作，等待阅读器下一时隙查询命令
        TagsNum = TagsNum - 1;  % 更新本帧内待查询的标签数
        S_succ = S_succ + 1;  % 该时隙为成功时隙
        
    else  % 阅读器检测到数据信息但无法正确识别出来，也就是此时隙内有多个标签在传送信息
        for m = 1:length(Remove)  % 阅读器命令该时隙内的标签等待下一帧查询周期再发送数据
            RandSlot( Remove(m)-(m-1) ) = [ ];
            SlotCounter( Remove(m)-(m-1) ) = [ ];
        end
        SlotCounter = SlotCounter +1;  % 同时其余标签将自身时隙计数器进行加 1 操作
        TagsNum = TagsNum - length(Remove);  % 更新本帧内待查询的标签数
        S_coll = S_coll + 1;  % 该时隙为碰撞时隙
    end
end  % 当查询的时隙数与初始规定的帧长度 N 相等时，阅读器发送结束本帧的查询，
end  % 并根据这一帧的 S_succ、S_idle 和 S_coll 来估计下一帧未被识别的标签数，以此调整下一帧的查询帧长度

